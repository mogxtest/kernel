name: BlueOS Standalone CI
 
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
 
concurrency:
  group: ${{ github.repository }}-${{ github.event.issue.number || github.event.pull_request.number }}
  cancel-in-progress: true
 
jobs:
  build-system:
    # 仅在包含"start build"且PR/Issue开放时触发
    if: |
      contains(github.event.comment.body, 'start build') &&
      (
        (github.event.issue.state == 'open') ||
        (github.event.pull_request.state == 'open')
      )
    runs-on: ubuntu-latest
    env:
      ORCHESTRATOR_TOKEN: ${{ secrets.REPO_ORCHESTRATOR_TOKEN01 }}
      MANIFEST_REPO: https://github.com/mogxtest/manifests
      
    steps:
      # 步骤1: 初始设置和状态通知
      - name: Initialize and notify
        id: init
        run: |
          # 确定触发器类型
          if [ -n "${{ github.event.issue.pull_request }}" ]; then
            echo "trigger_type=pr" >> $GITHUB_OUTPUT
            echo "source_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "trigger_type=issue" >> $GITHUB_OUTPUT
            echo "source_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          fi
           
          # 构建状态链接
          RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            
          # 保存运行URL
          echo "run_url=$RUN_URL" >> $GITHUB_OUTPUT
 
      # 步骤2: 提取PR链接
      - name: Extract PR links
        id: extract-prs
        run: |
          # 提取所有PR链接
          PR_LINKS=$(echo "${{ github.event.comment.body }}" | grep -oE 'https://github.com/[^/ ]+/pull/[0-9]+' | sort | uniq)
          echo "PR_LINKS:"
          echo "$PR_LINKS"
       
          # 如果没有链接，添加当前PR
          if [ -z "$PR_LINKS" ] && [ -n "${{ github.event.issue.pull_request }}" ]; then
            CURRENT_PR="https://github.com/${{ github.repository }}/pull/${{ github.event.issue.number }}"
            echo "CURRENT_PR"
            echo $CURRENT_PR
            PR_LINKS=$CURRENT_PR
          fi
          
          # 转换为JSON数组并用单行格式输出
          PR_LINKS_ARRAY=$(echo "$PR_LINKS" | jq -R -s 'split("\n") | map(select(. != ""))')
          pr_links_formatted=$(echo "$PR_LINKS_ARRAY" | jq '. | join(",")')
          echo "pr_links=[${pr_links_formatted}]" >> $GITHUB_OUTPUT
          echo "pr_links=${pr_links}"
          
          echo "Detected PRs:"
          echo "$PR_LINKS"
 
      # 步骤3: 验证PR状态
      - name: Validate PRs
        run: |
          # 安装必要工具
          PR_LINKS='${{ steps.extract-prs.outputs.pr_links }}'
          
          # 验证每个PR状态
          INVALID_COUNT=0
          echo "$PR_LINKS" | jq -r '.[]' | while read link; do
            # 解析PR信息
            PARTS=($(echo "$link" | sed -E 's|https://github.com/([^/]+)/([^/]+)/pull/([0-9]+)|\1 \2 \3|'))
            OWNER=${PARTS[0]}
            REPO=${PARTS[1]}
            PR_NUM=${PARTS[2]}
            
            echo "Validating PR: $OWNER/$REPO#$PR_NUM"
            
            # 获取PR详细信息
            PR_JSON=$(curl -s -H "Authorization: Bearer $ORCHESTRATOR_TOKEN" \
              "https://api.github.com/repos/$OWNER/$REPO/pulls/$PR_NUM")
            
            state=$(echo "$PR_JSON" | jq -r '.state')
            merged=$(echo "$PR_JSON" | jq -r '.merged')
            mergeable=$(echo "$PR_JSON" | jq -r '.mergeable')
            echo "PR_JSON=${PR_JSON} state=${state}  merged=${merged} mergeable=${mergeable}"
            
            if [ "$state" != "open" ] || [ "$merged" == "true" ] || [ "$mergeable" != "true" ]; then
              echo "::error::PR $OWNER/$REPO#$PR_NUM is not buildable"
              echo "::error::State: $state, Merged: $merged, Mergeable: $mergeable"
              INVALID_COUNT=$((INVALID_COUNT+1))
            fi
          done
          
          if [ $INVALID_COUNT -gt 0 ]; then
            echo "::error::Found $INVALID_COUNT invalid PRs"
            exit 1
          fi
 
      
